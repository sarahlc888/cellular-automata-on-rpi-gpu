/*
This file was taken directly from 
https://github.com/cs107e/ahconkey-JoshFrancisCodes-project/tree/master/src/lib
which adapted it from a Broadcom source.

See below for their references.
*/

/*
Copyright (c) 2012, Broadcom Europe Ltd.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the copyright holder nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*  
 * Versions of the Broadcom "mailbox.h" functions modified to make use of the
 * CS107E "mailbox_request" function. Additionally, defines a new function for
 * modifying the QPU clock rate (necessary in a bare metal context)
 * 
 * For original Broadcom code, see
 * https://github.com/raspberrypi/userland/blob/master/host_applications/linux/apps/hello_pi/hello_fft/mailbox.c
 *
 * For resources on mailbox request properties, see 
 * https://github.com/raspberrypi/documentation/blob/JamesH65-mailbox_docs/configuration/mailboxes/propertiesARM-VC.md
 * and 
 * https://github.com/PeterLemon/RaspberryPi/blob/master/TagsChannel/LIB/R_PI.INC
 *
 * We remove functions with linux dependencies, like mapmem, unmapmem, and
 * mbbox_open (functionality of mailbox_open provided by our mailbox.h)
 * 
 * NOTE: In our refactor, "int file_desc" becomes an entirely unecessary
 * parameter. We maintain it for ease of adapting exsting code, but future
 * updates should probably remove it from the primary functions and provide 
 * dummy wrappers for support.
 *
 * Author: Andrew Conkey <aconkey@cs.stanford.edu>
 * Sun Mar 19 11:37:13 EST 2021
 *        
 */

#define MAJOR_NUM 100


enum mem_flags {
    //https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface

    MEM_FLAG_DISCARDABLE = 1 << 0, /* can be resized to 0 at any time. Use for cached data */
    MEM_FLAG_NORMAL = 0 << 2, /* normal allocating alias. Don't use from ARM */
    MEM_FLAG_DIRECT = 1 << 2, /* 0xC alias uncached */
    MEM_FLAG_COHERENT = 2 << 2, /* 0x8 alias. Non-allocating in L2 but coherent */
    MEM_FLAG_L1_NONALLOCATING = (MEM_FLAG_DIRECT | MEM_FLAG_COHERENT), /* Allocating in L2 */
    MEM_FLAG_ZERO = 1 << 4,  /* initialise buffer to all zeros */
    MEM_FLAG_NO_INIT = 1 << 5, /* don't initialise (default is initialise to all ones */
    MEM_FLAG_HINT_PERMALOCK = 1 << 6, /* Likely to be locked for long periods of time. */
};

/*
 *'mem_alloc'
 *
 *Returns a handle corresponsing to a block of GPU memory of the requested size and alignment.
 *
 *@param file_desc  throwaway
 *@param size       requested memory size in bytes
 *@param align      requested memory alignment
 *@param flags      GPU memory flags (see above)
 *@return           handle of allocated memory
 */
unsigned mem_alloc(int file_desc, unsigned size, unsigned align, unsigned flags);

/*
 *'mem_free'
 *
 *Frees a previously allocated block of GPU memory
 *
 *@param file_desc  throwaway
 *@param handle     handle of memory to free
 *@return           status=0 if success
 */

unsigned mem_free(int file_desc, unsigned handle);

/*
 *'mem_lock'
 *
 *Locks a previously allocated block of GPU memory in place and returns a pointer. Necessary for QPU memory writing.
 *
 *@param file_desc  throwaway
 *@param handle     the handle of the block to lock, as generated by a previous call to 'mem_alloc'
 *@return           pointer to start of locked memory
 */
unsigned mem_lock(int file_desc, unsigned handle);

/*
 *'mem_unlock'
 *
 *Unlocks a previously allocated block of GPU memory.
 *
 *@param file_desc  throwaway
 *@param handle     the handle of the block to unlock, as generated by a previous call to 'mem_alloc'
 *@return           status=0 if success
 */
unsigned mem_unlock(int file_desc, unsigned handle);

/*
 *'execute_code' 
 *
 *Executes code on the VPU via mailbox request (emphasis: VPU not QPU).
 *
 *@param file_desc  throwaway
 *@param code       pointer to assembled VPU code in memory     
 *@r0-r5            values to initialize the first 6 registers 
 *@return           value of r0 on complete
 */
unsigned execute_code(int file_desc, unsigned code, unsigned r0, unsigned r1, unsigned r2, unsigned r3, unsigned r4, unsigned r5);

/*
 *`execute_qpu'
 *
 *Executes code on the QPU via mailbox request. Requires prior calls to qpu_enable and set_clock_rate
 *We largely circumvent this function by instead writing program and uniform pointers to scheduler registers directly. To see how buffers should be formatted, see https://github.com/elorimer/rpi-playground/blob/master/QPU/helloworld/driver.c
 *
 *@param file_desc  throwaway
 *@param num_qpus   number of QPUs on which to execute code.
 *@param control    pointer to buffer containing uniforms and code (unclear if required to be in GPU memory)
 *@param flush      somewhat poor understood, has to do with flushing the cache, we use 1
 *@param timeout    timeout in milliseconds
 *@return           status=0 if success
 */
unsigned execute_qpu(int file_desc, unsigned num_qpus, unsigned control, unsigned noflush, unsigned timeout);

/*
 *'qpu_enable'
 *
 *Necessary for using the QPU or reading QPU peripheral registers
 *
 *@param enable     use enable=1 to enable, other behavior unknown (presumably 0 to disable)
 *@return           status=0 if success
 *
 */
unsigned qpu_enable(int file_desc, unsigned enable);

/*'set_clock_rate'
 *
 * Sets the QPUs clock rate, which initialized to zero. For 250 MHz, use
 * rate=250*1000*1000
 *
 *@param rate       the desired QPU clock rate in Hz
 *@return           unclear, possibly new clock rate
 */
unsigned set_clock_rate(unsigned rate);
